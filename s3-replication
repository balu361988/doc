s3-replication/
├── lambda_function.py       # Your Lambda logic
├── function.zip             # Zipped Lambda code (auto created)
└── main.tf                  # Terraform file

......................................................................................................
lambda_function.py (Python Script for Replication)
.......................................................................................................


import boto3
import urllib.parse

s3 = boto3.client('s3')

def lambda_handler(event, context):
    source_bucket = event['Records'][0]['s3']['bucket']['name']
    key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'])
    destination_bucket = 'destination-bucket-balu'  # Change this!

    copy_source = {'Bucket': source_bucket, 'Key': key}
    
    s3.copy_object(CopySource=copy_source, Bucket=destination_bucket, Key=key)
    print(f"Copied {key} from {source_bucket} to {destination_bucket}")
.........................................................................................................

Zip the Lambda Function
........................................................................................................

sudo apt update
sudo apt install zip -y
zip function.zip lambda_function.py
......................................................................................................
main.tf (Terraform Configuration)
..................................................................................................
provider "aws" {
  region = "ap-south-1"
}

resource "aws_s3_bucket" "source" {
  bucket = "source-bucket-balu"
}

resource "aws_s3_bucket" "destination" {
  bucket = "destination-bucket-balu"
}

resource "aws_iam_role" "lambda_exec" {
  name = "lambda-s3-replication-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Action = "sts:AssumeRole",
      Principal = {
        Service = "lambda.amazonaws.com"
      },
      Effect = "Allow",
      Sid    = ""
    }]
  })
}

resource "aws_iam_policy_attachment" "lambda_logs" {
  name       = "lambda_logs"
  roles      = [aws_iam_role.lambda_exec.name]
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

resource "aws_iam_policy_attachment" "s3_access" {
  name       = "lambda_s3_access"
  roles      = [aws_iam_role.lambda_exec.name]
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
}

resource "aws_lambda_function" "replicator" {
  function_name = "S3ReplicatorFunction"
  handler       = "lambda_function.lambda_handler"
  runtime       = "python3.12"
  filename      = "function.zip"
  role          = aws_iam_role.lambda_exec.arn
  source_code_hash = filebase64sha256("function.zip")
}

resource "aws_lambda_permission" "allow_s3" {
  statement_id  = "AllowS3Invoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.replicator.function_name
  principal     = "s3.amazonaws.com"
  source_arn    = aws_s3_bucket.source.arn
}

resource "aws_s3_bucket_notification" "source_trigger" {
  bucket = aws_s3_bucket.source.id

  lambda_function {
    lambda_function_arn = aws_lambda_function.replicator.arn
    events              = ["s3:ObjectCreated:*"]
  }

  depends_on = [aws_lambda_permission.allow_s3]
}
.......................................................................................................
Deploy
...................................................................................................
terraform init
terraform apply -auto-approve
.............................................................................................





